use std::fmt::{Display, Formatter};
use crate::lexer::Token;

impl Token<'_> {
    pub fn id(&self) -> TokenId {
        match self {
            Token::Break => TokenId::Break,
            Token::Continue => TokenId::Break,
            Token::Else => TokenId::Else,
            Token::Enum => TokenId::Enum,
            Token::Extern => TokenId::Extern,
            Token::False => TokenId::False,
            Token::Fn => TokenId::Fn,
            Token::For => TokenId::For,
            Token::If => TokenId::If,
            Token::Impl => TokenId::Impl,
            Token::In => TokenId::In,
            Token::Let => TokenId::Let,
            Token::When => TokenId::When,
            Token::Mod => TokenId::Mod,
            Token::Mut => TokenId::Mut,
            Token::Pub => TokenId::Pub,
            Token::Return => TokenId::Return,
            Token::SelfValue => TokenId::SelfValue,
            Token::SelfType => TokenId::SelfType,
            Token::Struct => TokenId::Struct,
            Token::Trait => TokenId::Trait,
            Token::True => TokenId::True,
            Token::Unsafe => TokenId::Unsafe,
            Token::Use => TokenId::Use,
            Token::Where => TokenId::Where,
            Token::While => TokenId::While,
            Token::Async => TokenId::Async,
            Token::Await => TokenId::Await,
            Token::Dyn => TokenId::Dyn,
            Token::OpenParen => TokenId::OpenParen,
            Token::CloseParen => TokenId::CloseParen,
            Token::OpenBrace => TokenId::OpenBrace,
            Token::CloseBrace => TokenId::CloseBrace,
            Token::OpenBracket => TokenId::OpenBracket,
            Token::CloseBracket => TokenId::CloseBracket,
            Token::Dot => TokenId::Dot,
            Token::Comma => TokenId::Comma,
            Token::Semicolon => TokenId::Semicolon,
            Token::Colon => TokenId::Colon,
            Token::EqEq => TokenId::EqEq,
            Token::AddEq => TokenId::AddEq,
            Token::SubEq => TokenId::SubEq,
            Token::MulEq => TokenId::MulEq,
            Token::DivEq => TokenId::DivEq,
            Token::RemEq => TokenId::RemEq,
            Token::Eq => TokenId::Eq,
            Token::Add => TokenId::Add,
            Token::Sub => TokenId::Sub,
            Token::Mul => TokenId::Mul,
            Token::Rem => TokenId::Rem,
            Token::And => TokenId::And,
            Token::Or => TokenId::Or,
            Token::Xor => TokenId::Xor,
            Token::Int(_) => TokenId::Int,
            Token::Float(_) => TokenId::Float,
            Token::Char(_) => TokenId::Char,
            Token::Str(_) => TokenId::Str,
            Token::Ident(_) => TokenId::Ident,
            Token::Error => TokenId::Error,
            Token::Arrow => TokenId::Arrow,
            Token::Div => TokenId::Div,
            Token::DubArrow => TokenId::DubArrow,
            Token::NotEq => TokenId::NotEq,
            Token::Not => TokenId::Not,
            Token::AndEq => TokenId::AndEq,
            Token::OrEq => TokenId::OrEq,
            Token::XorEq => TokenId::XorEq,
            Token::GreaterEq => TokenId::GreaterEq,
            Token::LessEq => TokenId::LessEq,
            Token::Greater => TokenId::Greater,
            Token::Less => TokenId::Less,
            Token::Shl => TokenId::Shl,
            Token::Shr => TokenId::Shr,
            Token::LogAnd => TokenId::LogAnd,
            Token::LogOr => TokenId::LogOr,
            Token::Loop => TokenId::Loop,
            Token::Question => TokenId::Question,
            Token::ColonColon => TokenId::ColonColon,
        }
    }
}

#[derive(Copy, Clone, Ord, PartialOrd, Eq, PartialEq)]
pub enum TokenId {
    Break,
    Continue,
    Else,
    Enum,
    Extern,
    False,
    Fn,
    For,
    If,
    Impl,
    In,
    Let,
    When,
    Mod,
    Mut,
    Pub,
    Return,
    SelfValue,
    SelfType,
    Struct,
    Trait,
    True,
    Unsafe,
    Use,
    Where,
    While,
    Async,
    Await,
    Dyn,
    OpenParen,
    CloseParen,
    OpenBrace,
    CloseBrace,
    OpenBracket,
    CloseBracket,
    Dot,
    Comma,
    Semicolon,
    Colon,
    NotEq,
    EqEq,
    AddEq,
    SubEq,
    MulEq,
    DivEq,
    RemEq,
    Not,
    Eq,
    Add,
    Sub,
    Mul,
    Div,
    Rem,
    And,
    Or,
    Xor,
    Arrow,
    DubArrow,
    Int,
    Float,
    Char,
    Str,
    Ident,
    Error,
    AndEq,
    OrEq,
    XorEq,
    GreaterEq,
    LessEq,
    Greater,
    Less,
    Shl,
    Shr,
    LogAnd,
    LogOr,
    Loop,
    Question,
    ColonColon,
}

impl TokenId {
    pub fn eq(&self, token: &Token) -> bool {
        match token {
            Token::Break => self == &TokenId::Break,
            Token::Continue => self == &TokenId::Continue,
            Token::Else => self == &TokenId::Else,
            Token::Enum => self == &TokenId::Enum,
            Token::Extern => self == &TokenId::Extern,
            Token::False => self == &TokenId::False,
            Token::Fn => self == &TokenId::Fn,
            Token::For => self == &TokenId::For,
            Token::If => self == &TokenId::If,
            Token::Impl => self == &TokenId::Impl,
            Token::In => self == &TokenId::In,
            Token::Let => self == &TokenId::Let,
            Token::When => self == &TokenId::When,
            Token::Mod => self == &TokenId::Mod,
            Token::Mut => self == &TokenId::Mut,
            Token::Pub => self == &TokenId::Pub,
            Token::Return => self == &TokenId::Return,
            Token::SelfValue => self == &TokenId::SelfValue,
            Token::SelfType => self == &TokenId::SelfType,
            Token::Struct => self == &TokenId::Struct,
            Token::Trait => self == &TokenId::Trait,
            Token::True => self == &TokenId::True,
            Token::Unsafe => self == &TokenId::Unsafe,
            Token::Use => self == &TokenId::Use,
            Token::Where => self == &TokenId::Where,
            Token::While => self == &TokenId::While,
            Token::Async => self == &TokenId::Async,
            Token::Await => self == &TokenId::Await,
            Token::Dyn => self == &TokenId::Dyn,
            Token::OpenParen => self == &TokenId::OpenParen,
            Token::CloseParen => self == &TokenId::CloseParen,
            Token::OpenBrace => self == &TokenId::OpenBrace,
            Token::CloseBrace => self == &TokenId::CloseBrace,
            Token::OpenBracket => self == &TokenId::OpenBracket,
            Token::CloseBracket => self == &TokenId::CloseBracket,
            Token::Dot => self == &TokenId::Dot,
            Token::Comma => self == &TokenId::Comma,
            Token::Semicolon => self == &TokenId::Semicolon,
            Token::Colon => self == &TokenId::Colon,
            Token::EqEq => self == &TokenId::EqEq,
            Token::AddEq => self == &TokenId::AddEq,
            Token::SubEq => self == &TokenId::SubEq,
            Token::MulEq => self == &TokenId::MulEq,
            Token::DivEq => self == &TokenId::DivEq,
            Token::RemEq => self == &TokenId::RemEq,
            Token::Eq => self == &TokenId::Eq,
            Token::Add => self == &TokenId::Add,
            Token::Sub => self == &TokenId::Sub,
            Token::Mul => self == &TokenId::Mul,
            Token::Rem => self == &TokenId::Rem,
            Token::And => self == &TokenId::And,
            Token::Or => self == &TokenId::Or,
            Token::Xor => self == &TokenId::Xor,
            Token::Int(_) => self == &TokenId::Int,
            Token::Float(_) => self == &TokenId::Float,
            Token::Char(_) => self == &TokenId::Char,
            Token::Str(_) => self == &TokenId::Str,
            Token::Ident(_) => self == &TokenId::Ident,
            Token::Error => self == &TokenId::Error,
            Token::Arrow => self == &TokenId::Arrow,
            Token::Div => self == &TokenId::Div,
            Token::DubArrow => self == &TokenId::DubArrow,
            Token::NotEq => self == &TokenId::NotEq,
            Token::Not => self == &TokenId::Not,
            Token::AndEq => self == &TokenId::AndEq,
            Token::OrEq => self == &TokenId::OrEq,
            Token::XorEq => self == &TokenId::XorEq,
            Token::GreaterEq => self == &TokenId::GreaterEq,
            Token::LessEq => self == &TokenId::LessEq,
            Token::Greater => self == &TokenId::Greater,
            Token::Less => self == &TokenId::Less,
            Token::Shl => self == &TokenId::Shl,
            Token::Shr => self == &TokenId::Shr,
            Token::LogAnd => self == &TokenId::LogAnd,
            Token::LogOr => self == &TokenId::LogOr,
            Token::Loop => self == &TokenId::Loop,
            Token::Question => self == &TokenId::Question,
            Token::ColonColon => self == &TokenId::ColonColon,
        }
    }
}

impl Display for TokenId {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        match self {
            TokenId::Break => f.write_str("break"),
            TokenId::Continue => f.write_str("continue"),
            TokenId::Else => f.write_str("else"),
            TokenId::Enum => f.write_str("enum"),
            TokenId::Extern => f.write_str("extern"),
            TokenId::False => f.write_str("false"),
            TokenId::Fn => f.write_str("fn"),
            TokenId::For => f.write_str("for"),
            TokenId::If => f.write_str("if"),
            TokenId::Impl => f.write_str("impl"),
            TokenId::In => f.write_str("in"),
            TokenId::Let => f.write_str("let"),
            TokenId::When => f.write_str("when"),
            TokenId::Mod => f.write_str("mod"),
            TokenId::Mut => f.write_str("mut"),
            TokenId::Pub => f.write_str("pub"),
            TokenId::Return => f.write_str("return"),
            TokenId::SelfValue => f.write_str("self"),
            TokenId::SelfType => f.write_str("Self"),
            TokenId::Struct => f.write_str("struct"),
            TokenId::Trait => f.write_str("trait"),
            TokenId::True => f.write_str("true"),
            TokenId::Unsafe => f.write_str("unsafe"),
            TokenId::Use => f.write_str("use"),
            TokenId::Where => f.write_str("where"),
            TokenId::While => f.write_str("while"),
            TokenId::Async => f.write_str("async"),
            TokenId::Await => f.write_str("await"),
            TokenId::Dyn => f.write_str("dyn"),
            TokenId::OpenParen => f.write_str("("),
            TokenId::CloseParen => f.write_str(")"),
            TokenId::OpenBrace => f.write_str("{"),
            TokenId::CloseBrace => f.write_str("}"),
            TokenId::OpenBracket => f.write_str("["),
            TokenId::CloseBracket => f.write_str("]"),
            TokenId::Dot => f.write_str("."),
            TokenId::Comma => f.write_str(","),
            TokenId::Semicolon => f.write_str(";"),
            TokenId::Colon => f.write_str(":"),
            TokenId::EqEq => f.write_str("=="),
            TokenId::AddEq => f.write_str("+="),
            TokenId::SubEq => f.write_str("-="),
            TokenId::MulEq => f.write_str("*="),
            TokenId::DivEq => f.write_str("/="),
            TokenId::RemEq => f.write_str("%="),
            TokenId::Eq => f.write_str("="),
            TokenId::Add => f.write_str("+"),
            TokenId::Sub => f.write_str("-"),
            TokenId::Mul => f.write_str("*"),
            TokenId::Div => f.write_str("/"),
            TokenId::Rem => f.write_str("%"),
            TokenId::And => f.write_str("&"),
            TokenId::Or => f.write_str("|"),
            TokenId::Xor => f.write_str("^"),
            TokenId::Arrow => f.write_str("->"),
            TokenId::Int => f.write_str("integer literal"),
            TokenId::Float => f.write_str("float literal"),
            TokenId::Char => f.write_str("character literal"),
            TokenId::Str => f.write_str("string literal"),
            TokenId::Ident => f.write_str("identifier"),
            TokenId::Error => f.write_str("error"),
            TokenId::DubArrow => f.write_str("=>"),
            TokenId::NotEq => f.write_str("!="),
            TokenId::Not => f.write_str("!"),
            TokenId::AndEq => f.write_str("&="),
            TokenId::OrEq => f.write_str("|="),
            TokenId::XorEq => f.write_str("^="),
            TokenId::GreaterEq => f.write_str(">="),
            TokenId::LessEq => f.write_str("<="),
            TokenId::Greater => f.write_str(">"),
            TokenId::Less => f.write_str("<"),
            TokenId::Shl => f.write_str("<<"),
            TokenId::Shr => f.write_str(">>"),
            TokenId::LogAnd => f.write_str("&&"),
            TokenId::LogOr => f.write_str("||"),
            TokenId::Loop => f.write_str("loop"),
            TokenId::Question => f.write_str("?"),
            TokenId::ColonColon => f.write_str("::"),
        }
    }
}